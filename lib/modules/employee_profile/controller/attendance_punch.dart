// ignore_for_file: invalid_use_of_protected_member

import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:camera/camera.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:pocket_hrms/services/geolocation_services.dart';
import 'package:pocket_hrms/services/facerecognization.dart';
import 'package:pocket_hrms/mixins/shared_preferences_mixin.dart';

class PunchController extends GetxController with SingleGetTickerProviderMixin, SharedPreferencesMixin {
  late CameraController cameraController;
  late Future<void> initializeControllerFuture;
  late final CameraDescription camera;


RxDouble fillHeight = 0.0.obs; // Observable to control the fill height percentage

  late AnimationController animationController;
  late Animation<double> animation;

  var myFaces = {"image1": [-0.00757563766092062, -0.0009191142162308097, -0.0005681071779690683, 0.002103888662531972, -0.008366604335606098, -0.05577574297785759, -0.06722714006900787, 0.20707300305366516, 0.16410303115844727, -0.04881278797984123, 0.006812543608248234, -0.01055815163999796, 0.006968201603740454, 0.002344653941690922, -0.0026552609633654356, -0.1495114266872406, -0.0033156266435980797, 0.0008678844314999878, 0.008212435059249401, 0.0025620253290981054, -0.0764133483171463, -0.028763853013515472, -0.14970378577709198, 0.002698137890547514, 0.13645538687705994, -0.01002457458525896, 0.00017209575162269175, -0.045835137367248535, -0.06315560638904572, 0.0424933061003685, 0.016929352656006813, 0.05096060782670975, 0.18117952346801758, 0.001884648809209466, 0.10197767615318298, 0.006466956809163094, 0.05502432957291603, -0.003223827574402094, -0.00566811952739954, 0.09225904941558838, 0.001539707533083856, -0.0009346971637569368, -0.00835180003196001, 0.01688738726079464, -0.004639641847461462,
 0.002733909757807851, -0.227817565202713, 0.06878113746643066, -0.014583115465939045, 0.008887652307748795, -0.13642440736293793, 0.00044168985914438963, -0.09927681088447571, -0.001412279554642737, -0.040995094925165176, 0.008113369345664978, 0.06536305695772171, 0.0006832144572399557, -0.010824632830917835, -0.009828747250139713, -0.05241860821843147, 0.1198788732290268, -0.026606986299157143, 0.03535037860274315, -0.004577307961881161, 0.11155178397893906, -0.0010193949565291405, 0.038843557238578796, 0.008315104991197586, 0.0028345242608338594, -0.0010119950165972114, -0.23845405876636505, 0.055036261677742004, -0.015771042555570602, 0.10304216295480728, 0.00919103529304266, 0.0004289441858418286, 0.00041287337080575526, 0.2612590491771698, -0.12387564033269882, 0.010185971856117249, 0.10043415427207947, -0.002274384256452322, -0.11702027916908264, 0.1816224753856659, -0.0012763214763253927, 0.0039144218899309635, -0.08352397382259369, 0.1996428668498993, -0.16124725341796875, 0.018310951068997383,
 0.00004872310091741383, -0.004107614513486624, 0.015817154198884964, 0.07781733572483063, -0.04402632266283035, -0.01337286364287138, -0.13966353237628937, 0.00316173629835248, 0.03396877646446228, -0.0026913825422525406, 0.009083203971385956, -0.00786153506487608, -0.0007177804945968091, 0.01091783121228218, 0.0010106691624969244, 0.014353497885167599, 0.008565397001802921, -0.008698193356394768, -0.014697052538394928, 0.045561179518699646, 0.0075769429095089436, -0.0015173004940152168, 0.20108702778816223, -0.0008611949742771685, 0.0013804050395265222, -0.0022217780351638794, -0.004136338364332914, 0.07423587888479233, 0.1388130486011505, -0.10686519742012024, 0.01618904061615467, 0.07905968278646469, -0.0014831597218289971, -0.002182578667998314, 0.00799445528537035, 0.010681514628231525, -0.014144307002425194, 0.010873667895793915, 0.09208235144615173, -0.0006848264602012932, 0.015137871727347374, 0.003881682176142931, 0.0037995853926986456, -0.2222823053598404, 0.0021996144205331802, -0.028329998254776, 0.10161030292510986, -0.013345387764275074, -0.00622523482888937, 0.012392530217766762, -0.0008361029322259128, -0.004485482349991798, -0.04305770620703697, 0.17953480780124664, 0.033410269767045975, -0.015513848513364792, 0.002775288186967373, 0.0015995128778740764, 0.0037511407863348722, 0.009344719350337982, -0.1200433075428009, 0.14871865510940552, 0.007710639387369156, -0.0006427592597901821, 0.012924817390739918, -0.005387868732213974, -0.008123770356178284, 0.16895851492881775, -0.0027562747709453106, 0.002813381142914295, 0.0006097006844356656, 0.02387160249054432, -0.004411394242197275, 0.00088453758507967, -0.011269346810877323, -0.012674951925873756, -0.10391483455896378, 0.003996043931692839, 0.0011775498278439045, -0.11979448795318604, 0.10927893221378326, 0.0029281906317919493, 0.018747445195913315, 0.10632497817277908, -0.008029173128306866, 0.03107786364853382, 0.006900104694068432, 0.0017720290925353765, 0.002222443465143442, -0.09532114863395691, 0.027528634294867516, 0.004296022932976484,-0.005530614405870438, 0.09627488255500793, -0.03649474307894707, -0.055030323565006256, 0.010953192599117756, 0.07663749903440475, -0.08514571934938431, 0.009245996363461018, -0.017631078138947487], "image2": [-0.007674498949199915, 0.0034842398017644882, 0.0034526430536061525, 0.004887302406132221, -0.004702751990407705, -0.04245002195239067, -0.0464109368622303, 0.20142704248428345, 0.10549136996269226, 0.12206166982650757, 0.009171225130558014, -0.009808659553527832, 0.011268220841884613, 0.009038914926350117, -0.0017954031936824322, -0.19404515624046326, 0.0014608480269089341, 0.004279252141714096, 0.007851754315197468, -0.007780800107866526, -0.0038229876663535833, 0.012573698535561562, -0.21540915966033936, 0.0015814568614587188, 0.09991610050201416, 0.0005293437861837447, -0.0025842548348009586, 0.02307462878525257, -0.017098605632781982, 0.2226068526506424, 0.012102823704481125, 0.13514739274978638, 0.11329448968172073, 0.005437919404357672, 0.0765344575047493, -0.032098885625600815,
 0.09258052706718445, -0.0065452903509140015, -0.007659862283617258, 0.07001911848783493, 0.0029147870372980833, -0.0031361908186227083, -0.009086962789297104, 0.025830784812569618, -0.012860732153058052, -0.031194793060421944, -0.17676007747650146, 0.02795247547328472, -0.012129738926887512, 0.05953390151262283, -0.09730832278728485, 0.0007796078571118414, -0.1654326617717743, 0.00013803660112898797, 0.026281319558620453, 0.01215234026312828, 0.03483346104621887, -0.00010220691183349118, 0.005502262152731419, -0.010320245288312435, -0.059062305837869644, 0.08328162133693695, -0.10683835297822952, 0.06910792738199234, -0.001612225198186934, 0.10493851453065872, 0.00027872290229424834, 0.022165294736623764, 0.007952968589961529, 0.0000816177562228404, -0.004714936017990112, -0.23182468116283417, 0.02032613940536976, -0.014091836288571358, 0.15681885182857513, 0.010227004997432232, -0.003966141492128372, 0.0032151041086763144, 0.26311537623405457, -0.06317171454429626, 0.012376643717288971, 0.1459183543920517,
 -0.004430167842656374, -0.024388259276747704, 0.17459003627300262, -0.0010690989438444376, 0.00562575226649642, -0.09222550690174103, 0.21826386451721191, -0.1124957799911499, -0.007447415497153997, -0.0007915868773125112, -0.004120391793549061, 0.012407281436026096, 0.09780655056238174, 0.02211689203977585, -0.04868609458208084, -0.1271190196275711, -0.0006668947753496468, 0.017700709402561188, -0.004272857680916786, 0.01225194986909628, -0.0071144807152450085, 0.0000801560963736847, 0.0056145694106817245, -0.00221691164188087, -0.05766142159700394, 0.004606009926646948, -0.009269190952181816, -0.0034944454673677683, -0.08957774937152863, 0.007737693842500448, 0.007210905198007822, 0.11116229742765427, 0.0005371372681111097, 0.0740920752286911, -0.0020986266899853945, 0.001695736194960773, 0.05066060647368431, 0.1221906766295433, -0.0956597551703453, 0.01499108225107193, 0.1399109810590744, 0.00042210129322484136, -0.004321571439504623, 0.0038638324476778507, 0.010387063957750797, -0.013544775545597076,
 0.012214208953082561, 0.042608294636011124, -0.000614935124758631, 0.01387459971010685, 0.004299374297261238, 0.0449906662106514, -0.20516711473464966, 0.0016034622676670551, -0.03966318443417549, 0.05420722812414169, -0.010027707554399967, -0.008083522319793701, 0.009136732667684555, 0.001147853909060359, -0.004265128634870052, -0.06657365709543228, 0.13932181894779205, 0.046014197170734406, 0.0025796035770326853, 0.0032979792449623346, -0.0021798545494675636, -0.007005318999290466, 0.009416092187166214, -0.05427779257297516, 0.13141335546970367, 0.00047036175965331495, -0.0005292038549669087, 0.010291426442563534, -0.001927061821334064, -0.014189251698553562, 0.20917217433452606, -0.004895331338047981, 0.004360854160040617, -0.0020769357215613127, 0.0167344119399786, -0.003336704568937421, 0.00041019314085133374, -0.012903925962746143, -0.011262333020567894, -0.1363244652748108, -0.0032679422292858362, 0.005867297761142254, -0.12085875123739243, 0.05992947518825531, 0.0001808371307561174,
 0.005699543282389641, 0.09977021813392639, -0.009350267238914967, 0.0007432939019054174, -0.02671826258301735, 0.0009136748849414289, 0.0017415089532732964, -0.06082753464579582, -0.030237726867198944, 0.0005532535724341869, -0.005751480348408222, 0.10682661831378937, 0.04096376150846481, -0.06238977611064911, 0.05224452167749405, 0.15461550652980804, -0.008240699768066406, -0.0003752338816411793, -0.01621895283460617], "image3": [-0.003850650740787387, 0.00003945913340430707, -0.0023601576685905457, 0.002408609725534916, -0.003433222882449627, -0.024016227573156357, 0.015385890379548073, 0.26164618134498596, 0.11261113733053207, 0.12812979519367218, -0.0012192168505862355, -0.010164687409996986, 0.012764080427587032, -0.00010662440035957843, -0.0030062508303672075, -0.13815566897392273, 0.0029570467304438353, 0.003307113191112876, 0.009868022054433823, -0.009613724425435066, -0.010044658556580544, 0.004399472381919622, -0.21351340413093567, 0.0015480128349736333, 0.11507599800825119, 0.005905686412006617,
 0.0011150084901601076, 0.02824167162179947, 0.016954662278294563, 0.2274329513311386, 0.01301848329603672, 0.10002946108579636, 0.1644449084997177, 0.006779307499527931, 0.04743996635079384, 0.08735473453998566, 0.1228351965546608, -0.022082747891545296, -0.007654218934476376, 0.0450354740023613, 0.004325419664382935, -0.0022480504121631384, -0.006203599274158478, 0.013673316687345505, -0.009215159341692924, -0.01618896797299385, -0.2189992070198059, -0.04504984989762306, -0.013463101349771023, 0.0441620908677578, -0.12368423491716385, -0.0009914530673995614, -0.17787568271160126, 0.0009573440765962005, 0.05128315091133118, 0.014250683598220348, 0.1449710726737976, -0.00021154915157239884, -0.005554331932216883, -0.007273650728166103, -0.04446478933095932, 0.09764234721660614, -0.09432768076658249, 0.05989701673388481, 0.004755234811455011, 0.12952294945716858, -0.0026038363575935364, 0.016675248742103577, 0.0040872227400541306, -0.0005343036027625203, -0.0019306381000205874, -0.2570336163043976,
 0.03178355097770691, -0.011637813411653042, 0.08576875925064087, 0.015063143335282803, -0.008659170009195805, 0.00013991864398121834, 0.18554335832595825, -0.022666359320282936, 0.012938438914716244, 0.11512773483991623, -0.004019488580524921, -0.03838679939508438, 0.08109229803085327, -0.0034787992481142282, 0.008550168946385384, -0.11223446577787399, 0.20477403700351715, -0.11627355217933655, -0.004662374034523964, 0.0006148935644887388, 0.0033859191462397575, 0.013327567838132381, 0.01926037110388279, 0.01109305489808321, -0.022648906335234642, -0.1374693065881729, 0.0012969054514542222, 0.01618422009050846, -0.00416307570412755, 0.010605983436107635, -0.0042332252487540245, -0.0012603264767676592, 0.008149618282914162, -0.00032996488153003156, 0.026313461363315582, 0.0019155078334733844, -0.011442918330430984, -0.011899584904313087, -0.027955327183008194, 0.008150112815201283, -0.0034761361312121153, 0.16387203335762024, 0.002186371013522148, 0.1025586649775505, -0.002669617999345064,
 -0.0019386118510738015, 0.007695753127336502, 0.095777727663517, -0.05901409685611725, 0.0071082268841564655, 0.11766250431537628, 0.0001047173427650705, -0.005888503044843674, 0.002427419414743781, 0.014303954318165779, -0.016718344762921333, 0.010298476554453373, 0.06757000088691711, -0.0016460034530609846, 0.007492703851312399, 0.0016322393203154206, -0.003086994169279933, -0.18280728161334991, -0.0014850955922156572, -0.06825585663318634, 0.07625710964202881, -0.01724940724670887, -0.009931218810379505, 0.009545906446874142, 0.001077112858183682, -0.003655858337879181, -0.08718042820692062, 0.1291617602109909, 0.027392638847231865, -0.002398725599050522, 0.004283887334167957, 0.003700937144458294, -0.003501140046864748, 0.012062759138643742, 0.04899353161454201, 0.09980184584856033, -0.00026444977265782654, 0.003506337059661746, 0.012320663779973984, 0.0004435164446476847, 0.0016171442111954093, 0.17374518513679504, -0.0016644054558128119, 0.005739009007811546, -0.00044796374277211726, 0.016165841370821,
 -0.00406997324898839, 0.0014327644603326917, -0.011819449253380299, -0.012722182087600231, -0.19134964048862457, 0.0027736639603972435, 0.008865347132086754, -0.1630416363477707, 0.1700267195701599, 0.0020779112819582224, 0.019803453236818314, 0.06731921434402466, -0.009103395976126194, 0.007160914596170187, -0.03261955454945564, 0.0013444545911625028, 0.0013928648550063372, -0.01288177352398634, 0.06655499339103699, -0.000565741618629545, -0.007696790155023336, 0.015756139531731606, -0.0029620283748954535, -0.027462659403681755, 0.0362795814871788, 0.165660098195076, -0.06134810671210289, 0.0005904212594032288, -0.01124267652630806]};

  PunchController(this.camera);

  @override
  void onInit() {
    // TODO: implement onIniths
    super.onInit();
    cameraController = CameraController(
      camera,
      ResolutionPreset.high,
    );
    initializeControllerFuture = cameraController.initialize();

    saveValue("faceImages", json.encode(myFaces));

    animationController = AnimationController(
      vsync: this, // SingleTickerProviderMixin required here
      duration: Duration(milliseconds: 850), // Animation duration
    );

    // Define an animation from 0 to 1
    animation = Tween<double>(begin: 0.0, end: 1.0).animate(animationController)
      ..addListener(() {
        // Update the observable height as the animation progresses
        fillHeight.value = animation.value;
      });
  }

  @override
  void dispose() {
    // TODO: implement dispose
    cameraController.dispose();
    super.dispose();
  }

  desposeController(context) {
    cameraController.dispose();
    Navigator.pop(context);
  }

  refreshView() {
    getCurrentLocation();
  }

  var LocationDetails = {}.obs;

  var markers = <Marker>{}.obs;
  var circles = <Circle>{}.obs;
  var initialPosition = LatLng(0, 0).obs;

  // Method to add a marker
  void addMarker(Marker marker) {
    markers.add(marker);
  }

  // Method to add a circle
  void addCircle(Circle circle) {
    circles.add(circle);
  }

  void updateInitialPosition(LatLng position) {
    initialPosition.value = position;
  }

  getCurrentLocation() async {
    var CurrentGPLocation =
        await GeolocationServices().getCurrentGPSLocation(true, false);
    LocationDetails.value = json.decode(CurrentGPLocation.toString());

    initialPosition.value = LatLng(
        // ignore: duplicate_ignore
        // ignore: invalid_use_of_protected_member
        LocationDetails.value['latitude'],
        LocationDetails.value['longitude']);

    markers.add(
      Marker(
        markerId: MarkerId('marker_1'),
        position: LatLng(LocationDetails.value['latitude'],
            LocationDetails.value['longitude']),
      ),
    );

    circles.add(
      Circle(
        circleId: CircleId('circle_1'),
        center: LatLng(LocationDetails.value['latitude'],
            LocationDetails.value['longitude']),
        radius: 1000, // Radius in meters
        strokeColor: Colors.red,
        strokeWidth: 2,
        fillColor: Colors.red.withOpacity(0.3),
      ),
    );
  }

  Future<String> takePicture() async {
    try {
      await initializeControllerFuture;
      final XFile image = await cameraController.takePicture();
      String selectedImagePath = image.path;
      if (Platform.isAndroid) {
        return Future.value(selectedImagePath);
      } else {
        var selectedImageSize =
            ((File(selectedImagePath)).lengthSync() / 1024 / 1024)
                    .toStringAsFixed(2) +
                " Mb";

        final dir = await Directory.systemTemp;
        final targetPath =
            dir.absolute.path + "/${DateTime.now().millisecondsSinceEpoch}.jpg";
        var compressedFile = await FlutterImageCompress.compressAndGetFile(
            selectedImagePath, targetPath,
            quality: 60);

        var compressImagePath = compressedFile!.path;
        return Future.value(compressImagePath);
      }
    } catch (ex) {
      print(ex);
      return "";
    }
  }


// Start the color fill animation
  void startAnimation() {
     animationController.repeat(reverse: true); // Start the animation
  }

  // Reset the color fill animation
  void resetAnimation() {
    animationController.reset();
    fillHeight.value = 0.0; // Reset the fill height
  }

var isPunchPreparing = false.obs;

  preparePunch(BuildContext context) async {
    try {
      isPunchPreparing.value = true;
      var ImagePath = await takePicture();
      startAnimation();
      
      // Future.delayed(Duration(seconds: 10), () async{
               var result = await faceRecognizationService().verifyFace(File(ImagePath));
      if(result.isNotEmpty)
      {
          if(result["status"].toString().toLowerCase() == 'success')
          {
              ScaffoldMessenger.of(context).showSnackBar(
                   SnackBar(backgroundColor: Colors.green,content: Text('${result["message"]} \n Matching Confidence: ${result["matchingRation"]}', style: TextStyle(color: Colors.white),)));
             isPunchPreparing.value = false;
          }
          else
          {
             ScaffoldMessenger.of(context).showSnackBar(
                   SnackBar(backgroundColor: Colors.red,content: Text('${result["message"]} \n Matching Confidence: ${result["matchingRation"]}', style: TextStyle(color: Colors.white),)));
              isPunchPreparing.value = false;
          }
          
          resetAnimation();
      }
              // });
    } catch (ex) {}
  }

  var isProcesing = false.obs;
  void simulateProcess() async {
    isProcesing.value = true;
    animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    )..repeat();
    // Simulate a process with a delay

    await Future.delayed(const Duration(seconds: 2));
    isProcesing.value = false;
    if (isProcesing.value == false) animationController.stop();
  }
}
